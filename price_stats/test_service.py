""" Example of service unit testing best practice. """

from nameko.testing.services import worker_factory
from price_stats import PriceStats
from decimal import Decimal


def test_return_index():
    record_t_0 = {
        "prices": {
            "1": {
                "price": Decimal(
                    "1.061231382030519920789402021910063922405242919921875"
                ),
                "weight": Decimal(
                    "0.0027957876802519100213617608829963501193560659885406494140625"
                ),
            },
            "2": {
                "price": Decimal(
                    "1.03010200324091005796844910946674644947052001953125"
                ),
                "weight": Decimal(
                    "0.0028985055163313800004332154713893032749183475971221923828125"
                ),
            },
            "3": {
                "price": Decimal(
                    "1.00653489545280994121867479407228529453277587890625"
                ),
                "weight": Decimal(
                    "0.000053759797109744500713708614814123620817554183304309844970703125"
                ),
            },
            "4": {
                "price": Decimal(
                    "1.0481020294699499029178468845202587544918060302734375"
                ),
                "weight": Decimal(
                    "0.0023440641518856701434880829282292324933223426342010498046875"
                ),
            },
        },
        "timestamp": 9,
    }

    record_t_1 = {
        "prices": {
            "1": {
                "price": Decimal(
                    "1.05850922151940007864823201089166104793548583984375"
                ),
                "weight": Decimal(
                    "0.0027957876802519100213617608829963501193560659885406494140625"
                ),
            },
            "2": {
                "price": Decimal(
                    "1.0388509051084600098846522087114863097667694091796875"
                ),
                "weight": Decimal(
                    "0.0028985055163313800004332154713893032749183475971221923828125"
                ),
            },
            "3": {
                "price": Decimal(
                    "1.025615910993229906722490341053344309329986572265625"
                ),
                "weight": Decimal(
                    "0.000053759797109744500713708614814123620817554183304309844970703125"
                ),
            },
            "4": {
                "price": Decimal(
                    "1.048142570269960049955670911003835499286651611328125"
                ),
                "weight": Decimal(
                    "0.0023440641518856701434880829282292324933223426342010498046875"
                ),
            },
        },
        "timestamp": 8,
    }
    result = PriceStats._calculate_return_of_the_index_on_date_t(record_t_0, record_t_1)
    assert result == Decimal("0.00004322801198273501734624728889")
